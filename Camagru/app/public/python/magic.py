import google.generativeai as genai, types
from PIL import Image
from fastapi import UploadFile, File
from fastapi.responses import JSONResponse
import time
import os

Log_file= "/var/log/app.log"

def combine_images_with_gemini(image_paths: list[UploadFile], output_file: str= "combined_image.png"):
    """
    Sends multiple images and a text prompt to the Gemini API to generate a new, combined image.
    """
    if Log_file and os.path.exists(Log_file):
        os.remove(Log_file)
    with open( Log_file,"a") as f:
        f.write(f"Function called {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
    try:
        image_jsnon = []
        for image in image_paths:
            image_jsnon.append({"mime_type": image.content_type, "data": image.file.read()})
    except Exception as e:
        with open("/var/log/app.log", "a") as f:
            f.write(f"Error procesando fichero factura: {str(e)}\n")
        return JSONResponse(status_code=400, content={"success": False, "error": f"Invalid file format or data: {str(e)}"})
    try:    
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        USE_MODEL = os.getenv("IMAGE_MODEL")
        # Initialize the client (it automatically looks for the GEMINI_API_KEY env var)
        genai.configure(api_key=GOOGLE_API_KEY)
        model = genai.GenerativeModel(USE_MODEL)
        prompt = "Combine the two pictures."
        prompt += "Take the first image and  and overlay the second one into the first one."
        prompt += "Try to make the final result a single, photorealistic image."
        prompt += "The output image should be a PNG file."
        # 1. Load the images
        image_parts = []
        for image in image_jsnon:
            img = Image.open(image.file)
            # Create a Part object from the PIL image
            image_part = types.Part.from_image(img)
            image_parts.append(image_part)
        
        # 2. Combine all parts into the content list: Image 1, Image 2, then the Prompt
        contents = image_parts + [prompt]

        # 3. Call the API to generate content (the combined image)
        # Note: Set response_mime_types to 'image/png' (or 'image/jpeg') to get image output
        response = model.generate_content(
            contents=contents,
            config=types.GenerateContentConfig(
                response_mime_types=["image/png"] # Specify that you want an image back
            )
        )

        # 4. Extract and save the generated image
        if response.generations and response.generations[0].image:
            # The generated image is in the 'image' field of the first generation
            generated_image_bytes = response.generations[0].image.image_bytes
            
            # Save the raw bytes as a file
            #with open(output_file, 'wb') as f:
            #    f.write(generated_image_bytes)

            with open(Log_file, "a") as f:
                f.write(f"✅ Success! Combined image generated.\n")
        else:
            with open(Log_file, "a") as f:
                f.write("❌ Failure: Could not find a generated image in the response.\n")
            return JSONResponse(status_code=500, content={"success": False, "error": "No image generated by Gemini API."})
    except Exception as e:
        with open("/var/log/app.log", "a") as f:
            f.write(f"Error from Gemini API: {str(e)}\n")
        return JSONResponse(status_code=400, content={"success": False, "error": f"Error from Gemini API: {str(e)}"})
        
    return JSONResponse(status_code=200, content={"success": True, "message": f"Combined image saved to {generated_image_bytes}"})

if __name__ == "__main__":
        # --- Configuration ---
    # You'll need an image-enabled model for this task
    MODEL_NAME = 'gemini-2.5-flash-image-preview' # Or the latest image-capable model
    OUTPUT_FILENAME = "combined_image.png"

    # Replace with the actual paths to your two input pictures
    IMAGE_PATH_1 = "path/to/your/first_picture.jpg"
    IMAGE_PATH_2 = "path/to/your/second_picture.png"

    # The descriptive prompt is CRITICAL for telling the model how to combine them
    PROMPT = (
        "Combine the two pictures. Take the **subject** (a dog wearing a hat) "
        "from the first image and place it seamlessly into the **background** "
        "(a park at sunset) from the second image. The final result should be a "
        "single, photorealistic image."
    )
    # ---------------------
    combine_images_with_gemini(MODEL_NAME, PROMPT, [IMAGE_PATH_1, IMAGE_PATH_2], OUTPUT_FILENAME)